class Flight:
    def _init_(self, flight_id, source, destination, price):
        self.flight_id = flight_id
        self.source = source
        self.destination = destination
        self.price = price

class FlightTable:
    def _init_(self):
        self.flights = []

    def add_flight(self, flight):
        self.flights.append(flight)

    def search_by(self, criteria, value):
        return [flight for flight in self.flights if getattr(flight, criteria) == value]

def main():
    flight_table = FlightTable()

    flight_table.add_flight(Flight("AI161E90", "BLR", "BOM", 5600))
    flight_table.add_flight(Flight("BR161F91", "BOM", "BBI", 6750))
    flight_table.add_flight(Flight("AI161F99", "BBI", "BLR", 8210))
    flight_table.add_flight(Flight("VS171E20", "JLR", "BBI", 5500))
    flight_table.add_flight(Flight("AS171G30", "HYD", "JLR", 4400))
    flight_table.add_flight(Flight("AI131F49", "HYD", "BOM", 3499))

    cities = {
        "BLR": "Bengaluru",
        "BOM": "Mumbai",
        "BBI": "Bhubaneswar",
        "HYD": "Hyderabad",
        "JLR": "Jabalpur"
    }

    while True:
        print("1. Flights for a particular City")
        print("2. Flights From a city")
        print("3. Flights between two given cities")
        print("4. Exit")
        choice = int(input("Enter your choice: "))

        if choice in [1, 2, 3]:
            criteria = "source" if choice == 2 else "destination"
            value = input(f"Enter the {criteria} city code: ")
            flights = flight_table.search_by(criteria, value)
            action = "from" if choice == 2 else "to" if choice == 1 else "between"
            print(f"Flights {action} {cities[value]}:")
            for flight in flights:
                print(f"Flight ID: {flight.flight_id}, Price: {flight.price}")

        elif choice == 4:
            break

        else:
            print("Invalid choice. PLease select again.")

if __name__ == "__main__":
    main()